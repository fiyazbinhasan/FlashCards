@using Fluxor
@using FlashCards.Store.DecksUseCase
@using FlashCards.Store.CardsUseCase
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<MudAppBar Elevation="1">
    <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="ToggleMenu" />

    <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert="true">
        <MudText Typo="Typo.h5">Flash Cards</MudText>
    </MudHidden>

    @if (DecksState?.Value.SelectedDeckId != Guid.Empty)
    {
        <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert="true">
            <MudButton Class="ml-8" Variant="Variant.Filled" StartIcon="@Icons.Filled.NoteAdd" Color="Color.Primary"
                       Link="@($"/decks/{DecksState?.Value.SelectedDeckId}/new")">
                Add Card
            </MudButton>
            <MudButton Class="ml-3" Variant="Variant.Filled" StartIcon="@Icons.Filled.LocalLibrary" Color="Color.Primary"
                       Link="@($"/decks/{DecksState?.Value.SelectedDeckId}/study")">
                Study Deck
            </MudButton>
        </MudHidden>

        <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
            <MudButtonGroup Variant="Variant.Filled" Color="Color.Primary">
                <MudIconButton Icon="@Icons.Outlined.NoteAdd" Link="@($"/decks/{DecksState?.Value.SelectedDeckId}/new")" />
                <MudIconButton Icon="@Icons.Outlined.LocalLibrary" Link="@($"/decks/{DecksState?.Value.SelectedDeckId}/study")" />
            </MudButtonGroup>
        </MudHidden>

        <MudSpacer />

        <MudTextField @bind-Value="@_filterText"
                      Variant="Variant.Text"
                      Adornment="Adornment.End"
                      AdornmentIcon="@Icons.Filled.Search"
                      DebounceInterval="500"
                      OnDebounceIntervalElapsed="HandleIntervalElapsed"
                      AdornmentColor="Color.Inherit"
                      IconSize="Size.Medium"
                      Class="filter-text-field" />

        <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit"
                       Link="https://github.com/fiyazbinhasan/FlashCards" Target="_blank" />
    }
    else
    {
        <MudSpacer />

        <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit"
                       Link="https://github.com/fiyazbinhasan/FlashCards" Target="_blank" />
    }
</MudAppBar>

@code
{
    string _filterText = "";

    [Inject]
    public IState<DecksState>? DecksState { get; set; }

    [Inject]
    public IDispatcher? Dispatcher { get; set; }

    [Parameter]
    public EventCallback OnMenuToggle { get; set; }

    private async Task ToggleMenu()
    {
        await OnMenuToggle.InvokeAsync();
    }

    void HandleIntervalElapsed(string filterText)
    {
        Dispatcher?.Dispatch(new FilterCardAction(filterText));
    }
}