@using Fluxor
@using FlashCards.Store.CardsUseCase
@using FlashCards.Store.DecksUseCase
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<div class="modal">
    <div class="modal-content">
        @{
            bool Filter(Card c) => !c.LastStudiedOn.HasValue
                                   || ((DateTime.UtcNow - c.LastStudiedOn.Value) / TimeSpan.TicksPerDay).Ticks >= c.Score;

            var card = CardsState.Value.Cards.FirstOrDefault(c => c.DeckId == DeckId && Filter(c));

            @if (card != null)
            {
                <div class="@((CardsState.Value.ShowBack ? "front hide" : "front"))">
                    <div>
                        <MudText Typo="Typo.h4">@card.Front</MudText>
                    </div>

                    <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert="true">
                        <div class="d-flex justify-space-between">
                            <MudIconButton Icon="@Icons.Material.Filled.Pause" Variant="Variant.Filled" Color="Color.Info" OnClick="Close" />
                            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Flip" Color="Color.Primary" OnClick="Flip">Flip</MudButton>
                        </div>
                    </MudHidden>

                    <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
                        <div class="d-flex justify-center">
                            <MudButtonGroup Variant="Variant.Filled" Color="Color.Secondary">
                                <MudIconButton Icon="@Icons.Material.Filled.Pause" OnClick="Close" />
                                <MudIconButton Icon="@Icons.Material.Filled.Flip" OnClick="Flip" />
                            </MudButtonGroup>
                        </div>
                    </MudHidden>
                </div>

                <div class="@((CardsState.Value.ShowBack ? "back" : "back hide"))">
                    <div>
                        <MudText Typo="Typo.h4" Align="Align.Center">@card.Back</MudText>
                    </div>
                    <MudText Typo="Typo.h6" Class="ma-6" Align="Align.Center">How did you do?</MudText>

                    <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert="true">
                        <div class="d-flex justify-center">
                            <MudButton Class="mx-2" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.ThumbDown" Color="Color.Error" OnClick="(e) => OnCardStudied(card, Math.Max(card.Score - 1, 1))">Poorly</MudButton>
                            <MudButton Class="mx-2" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.ThumbUp" Color="Color.Success" OnClick="(e) => OnCardStudied(card, card.Score)">Okay</MudButton>
                            <MudButton Class="mx-2" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Star" Color="Color.Primary" OnClick="(e) => OnCardStudied(card, Math.Min(card.Score + 1, 3))">Great</MudButton>
                        </div>
                    </MudHidden>

                    <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
                        <div class="d-flex justify-center">
                            <MudButtonGroup Variant="Variant.Filled" Color="Color.Secondary">
                                <MudIconButton Icon="@Icons.Material.Filled.ThumbDown" OnClick="(e) => OnCardStudied(card, Math.Max(card.Score - 1, 1))" />
                                <MudIconButton Icon="@Icons.Material.Filled.ThumbUp" OnClick="(e) => OnCardStudied(card, card.Score)" />
                                <MudIconButton Icon="@Icons.Material.Filled.Star" OnClick="(e) => OnCardStudied(card, Math.Min(card.Score + 1, 3))" />
                            </MudButtonGroup>
                        </div>
                    </MudHidden>
                </div>
            }
            else
            {
                <div class="no-cards">
                    <div>
                        <MudText Typo="Typo.h5" Align="Align.Center">You have no cards to study in this deck right now.</MudText>
                    </div>
                    <div class="d-flex justify-center">
                        <MudButton StartIcon="@Icons.Custom.Uncategorized.AlertSuccess" Variant="Variant.Filled" Color="Color.Info" OnClick="Close">Good job</MudButton>
                    </div>
                </div>
            }
        }
    </div>
</div>

@code
{
    [Parameter]
    public Guid DeckId { get; set; }

    [Inject]
    public IState<CardsState> CardsState { get; set; }

    [Inject]
    public IDispatcher Dispatcher { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    void Close()
    {
        NavigationManager.NavigateTo($"/decks/{DeckId}");
    }

    private void Flip()
    {
        Dispatcher.Dispatch(new SetShowBackAction(true));
    }

    private void OnCardStudied(Card card, int score)
    {
        Dispatcher.Dispatch(new UpdateCardAction(card with { LastStudiedOn = DateTime.UtcNow, Score = score }));
        Dispatcher.Dispatch(new SetShowBackAction(false));
    }
}