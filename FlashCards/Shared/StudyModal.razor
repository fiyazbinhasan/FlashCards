@using Fluxor
@using FlashCards.Store.CardsUseCase
@using FlashCards.Store.DecksUseCase
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<div class="modal">
    <div class="modal-content">
        @{
            var card = CardsState.Value.Cards.FirstOrDefault(c => c.DeckId == DeckId);

            @if (card != null)
            {
                <div class="@((CardsState.Value.ShowBack ? "front hide" : "front"))">
                    <div>
                        <MudText Typo="Typo.h4">@card.Front</MudText>
                    </div>
                    <div class="d-flex justify-space-between">
                        <MudIconButton Icon="@Icons.Material.Filled.Pause" Variant="Variant.Filled" Color="Color.Warning" OnClick="Pause" />
                        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Flip" Color="Color.Primary" OnClick="((e) => Dispatcher.Dispatch(new ShowCardBackAction(true)))">Flip</MudButton>
                    </div>
                </div>
                <div class="@((CardsState.Value.ShowBack ? "back" : "back hide"))">
                    <div>
                        <MudText Typo="Typo.body1" Align="Align.Center">@card.Back</MudText>
                    </div>
                    <MudText Typo="Typo.h6" Class="ma-6" Align="Align.Center">How did you do?</MudText>
                    <div class="d-flex justify-center">
                        <MudButton Class="mx-2" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.ThumbDown" Color="Color.Error" OnClick="((e) => OnCardStudied(card.Id, Math.Max(card.Score - 1, 1)))">Poorly</MudButton>
                        <MudButton Class="mx-2" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.ThumbUp" Color="Color.Info" OnClick="((e) => OnCardStudied(card.Id, card.Score))">Okay</MudButton>
                        <MudButton Class="mx-2" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Star" Color="Color.Primary" OnClick="((e) => OnCardStudied(card.Id, Math.Min(card.Score + 1, 3)))">Great</MudButton>
                    </div>
                </div>
            }
            else
            {
                <MudAlert Severity="Severity.Info">You have no cards to study in this deck right now. Good job!</MudAlert>
            }
        }
    </div>
</div>

@code
{
    [Parameter]
    public Guid DeckId { get; set; }

    [Inject]
    public IState<CardsState> CardsState { get; set; }

    [Inject]
    public IDispatcher Dispatcher { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    void Pause()
    {
        NavigationManager.NavigateTo($"/decks/{DeckId}");
    }

    private void OnCardStudied(Guid cardId, int score)
    {
        Console.WriteLine($"{cardId} {score}");
    }
}