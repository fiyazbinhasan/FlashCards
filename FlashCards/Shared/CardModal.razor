@using FlashCards.Store.CardsUseCase

<div class="modal">
    <div class="modal-content">
        <MudText Typo="Typo.h6">@(OnDeleteCard.HasDelegate ? "Edit Card" : "Add Card")</MudText>
        <MudTextField Class="mt-8 mb-8" Label="Front" Variant="Variant.Outlined" @bind-Value="@Front" Lines="4" />
        <MudTextField Class="mb-8" Label="Back" Variant="Variant.Outlined" @bind-Value="@Back" Lines="4" />

        <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert="true">
            <div class="d-flex justify-space-between">
                <div>
                    <MudButton StartIcon="@Icons.Material.Filled.Save" Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveCard">Save</MudButton>
                    <MudButton StartIcon="@Icons.Material.Filled.Cancel" Variant="Variant.Filled" Color="Color.Secondary" Class="mx-2" OnClick="Cancel">Cancel</MudButton>
                </div>

                @if (OnDeleteCard.HasDelegate)
                {
                    <MudButton StartIcon="@Icons.Material.Filled.DeleteForever" Variant="Variant.Filled" Color="Color.Error" OnClick="DeleteCard">Delete</MudButton>
                }
            </div>
        </MudHidden>

        <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
            <div class="d-flex justify-center">
                <MudButtonGroup Variant="Variant.Filled" Color="Color.Secondary">
                    <MudIconButton Icon="@Icons.Material.Filled.Save" OnClick="SaveCard" />
                    <MudIconButton Icon="@Icons.Material.Filled.Cancel" OnClick="Cancel" />
                    @if (OnDeleteCard.HasDelegate)
                    {
                        <MudIconButton Icon="@Icons.Material.Filled.DeleteForever" OnClick="DeleteCard" />
                    }
                </MudButtonGroup>
            </div>
        </MudHidden>
    </div>
</div>

@code {

    [Inject]
    public NavigationManager? NavigationManager { get; set; }

    [Parameter]
    public Guid DeckId { get; set; }

    [Parameter]
    public Card? Card { get; set; }

    [Parameter]
    public EventCallback<Card> OnSaveCard { get; set; }

    [Parameter]
    public EventCallback<Guid> OnDeleteCard { get; set; }

    private Guid CardId { get; set; } = Guid.NewGuid();

    private string Front { get; set; } = string.Empty;

    private string Back { get; set; } = string.Empty;

    protected override Task OnParametersSetAsync()
    {
        if (Card != null)
            (CardId, Front, Back) = (Card.Id, Card.Front, Card.Back);

        return base.OnParametersSetAsync();
    }

    private async Task SaveCard()
    {
        await OnSaveCard.InvokeAsync(new Card(CardId, Front, Back, 1, null, DeckId));
        NavigationManager?.NavigateTo($"/decks/{DeckId}");
    }

    private async Task DeleteCard()
    {
        await OnDeleteCard.InvokeAsync(CardId);
        NavigationManager?.NavigateTo($"/decks/{DeckId}");
    }

    void Cancel()
    {
        NavigationManager?.NavigateTo($"/decks/{DeckId}");
    }
}