@using FlashCards.Store.DecksUseCase
@using Fluxor
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<MudNavMenu Class="mt-2">
    @foreach (var (guid, title) in DecksState!.Value.Decks)
    {
        <MudNavLink Href="@($"/decks/{guid}")" Icon="@Icons.Filled.Bookmark" IconColor="Color.Primary">
            @title
        </MudNavLink>
    }

    @if (DecksState.Value.AddingDeck)
    {
        <MudTextField Class="px-4 mt-4" @bind-Value="DeckTitle" OnKeyUp="AddDeck" Label="Deck Name" Variant="Variant.Text"
                      AutoFocus="AutoFocus" OnBlur="HideAddDeck" />
    }
</MudNavMenu>

@code
{
    private string DeckTitle { get; set; } = string.Empty;
    private bool AutoFocus { get; set; } = false;

    [Inject]
    private IState<DecksState>? DecksState { get; set; }

    [Inject]
    private IDispatcher? Dispatcher { get; set; }

    private void AddDeck(KeyboardEventArgs e)
    {
        if (e.Code is "Enter" or "NumpadEnter")
        {
            Dispatcher?.Dispatch(new AddDeckAction(new Deck(Guid.NewGuid(), DeckTitle)));
            HideAddDeck();
            DeckTitle = string.Empty;
        }
    }

    private void HideAddDeck()
    {
        Dispatcher?.Dispatch(new HideAddDeckAction());
    }

    protected override Task OnInitializedAsync()
    {
        if (DecksState != null && !DecksState.Value.Decks.Any())
            AutoFocus = true;

        return base.OnInitializedAsync();
    }
}